{
  "hash": "c76e92b160ca67aec475cfcb38473af3",
  "result": {
    "engine": "knitr",
    "markdown": "---\nformat:\n      closeread-html:\n            theme: [cosmo, styles.scss]\n            smooth-scroll: true\n            code-fold: true\n            cr-section:\n                  layout: sidebar-left\n            cr-style:\n                  narrative-background-color-sidebar: \"#021525\"\n                  section-background-color: \"#f6f9fc\"\n                  narrative-text-color-sidebar: \"#fdfdfd\"\n                  # narrative-overlay-max-width: \nknitr: true\n---\n\n\n\n:::::: cr-section\n::: {focus-on=\"cr-title\"}\n## Closeread OJS D3.js Interaction ![](images/water-wave.png){style=\"position: relative; top: -2.5px;\" width=\"40\"}\n\nfrank aragona\n:::\n\n:::: {#cr-title}\n::: splash-page\n## Overview\n\n-   How to use closeread with Observable JS\n-   How to make cool interactive plots when the user scrolls\n-   An intro to D3.js\n:::\n::::\n::::::\n\n:::::::: cr-section\n:::::: progress-block\n::: {focus-on=\"cr-ploty\"}\nHere's the main plot, scroll down.\n:::\n\n::: {focus-on=\"cr-ploty\"}\n\n\n::: {.cell}\n::: {.cell-output-display}\n\n```{=html}\n<div id=\"klifzfjzhc\" style=\"padding-left:0px;padding-right:0px;padding-top:10px;padding-bottom:10px;overflow-x:auto;overflow-y:auto;width:auto;height:auto;\">\n<style>@import url(\"https://fonts.googleapis.com/css2?family=JetBrains+Mono:ital,wght@0,100;0,200;0,300;0,400;0,500;0,600;0,700;0,800;0,900;1,100;1,200;1,300;1,400;1,500;1,600;1,700;1,800;1,900&display=swap\");\n#klifzfjzhc table {\n  font-family: 'JetBrains Mono', system-ui, 'Segoe UI', Roboto, Helvetica, Arial, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Noto Color Emoji';\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n}\n\n#klifzfjzhc thead, #klifzfjzhc tbody, #klifzfjzhc tfoot, #klifzfjzhc tr, #klifzfjzhc td, #klifzfjzhc th {\n  border-style: none;\n}\n\n#klifzfjzhc p {\n  margin: 0;\n  padding: 0;\n}\n\n#klifzfjzhc .gt_table {\n  display: table;\n  border-collapse: collapse;\n  line-height: normal;\n  margin-left: auto;\n  margin-right: auto;\n  color: #333333;\n  font-size: 16px;\n  font-weight: normal;\n  font-style: normal;\n  background-color: #FFFFFF;\n  width: auto;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #000000;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #000000;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n}\n\n#klifzfjzhc .gt_caption {\n  padding-top: 4px;\n  padding-bottom: 4px;\n}\n\n#klifzfjzhc .gt_title {\n  color: #333333;\n  font-size: 125%;\n  font-weight: initial;\n  padding-top: 4px;\n  padding-bottom: 4px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-bottom-color: #FFFFFF;\n  border-bottom-width: 0;\n}\n\n#klifzfjzhc .gt_subtitle {\n  color: #333333;\n  font-size: 85%;\n  font-weight: initial;\n  padding-top: 3px;\n  padding-bottom: 5px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-top-color: #FFFFFF;\n  border-top-width: 0;\n}\n\n#klifzfjzhc .gt_heading {\n  background-color: #FFFFFF;\n  text-align: left;\n  border-bottom-color: #FFFFFF;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n}\n\n#klifzfjzhc .gt_bottom_border {\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#klifzfjzhc .gt_col_headings {\n  border-top-style: solid;\n  border-top-width: 3px;\n  border-top-color: #000000;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n}\n\n#klifzfjzhc .gt_col_heading {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 80%;\n  font-weight: bolder;\n  text-transform: uppercase;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: bottom;\n  padding-top: 5px;\n  padding-bottom: 6px;\n  padding-left: 5px;\n  padding-right: 5px;\n  overflow-x: hidden;\n}\n\n#klifzfjzhc .gt_column_spanner_outer {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 80%;\n  font-weight: bolder;\n  text-transform: uppercase;\n  padding-top: 0;\n  padding-bottom: 0;\n  padding-left: 4px;\n  padding-right: 4px;\n}\n\n#klifzfjzhc .gt_column_spanner_outer:first-child {\n  padding-left: 0;\n}\n\n#klifzfjzhc .gt_column_spanner_outer:last-child {\n  padding-right: 0;\n}\n\n#klifzfjzhc .gt_column_spanner {\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  vertical-align: bottom;\n  padding-top: 5px;\n  padding-bottom: 5px;\n  overflow-x: hidden;\n  display: inline-block;\n  width: 100%;\n}\n\n#klifzfjzhc .gt_spanner_row {\n  border-bottom-style: hidden;\n}\n\n#klifzfjzhc .gt_group_heading {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 80%;\n  font-weight: bolder;\n  text-transform: uppercase;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: middle;\n  text-align: left;\n}\n\n#klifzfjzhc .gt_empty_group_heading {\n  padding: 0.5px;\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 80%;\n  font-weight: bolder;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  vertical-align: middle;\n}\n\n#klifzfjzhc .gt_from_md > :first-child {\n  margin-top: 0;\n}\n\n#klifzfjzhc .gt_from_md > :last-child {\n  margin-bottom: 0;\n}\n\n#klifzfjzhc .gt_row {\n  padding-top: 3px;\n  padding-bottom: 3px;\n  padding-left: 10px;\n  padding-right: 10px;\n  margin: 10px;\n  border-top-style: solid;\n  border-top-width: 1px;\n  border-top-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: middle;\n  overflow-x: hidden;\n}\n\n#klifzfjzhc .gt_stub {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 80%;\n  font-weight: bolder;\n  text-transform: uppercase;\n  border-right-style: solid;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  padding-left: 10px;\n  padding-right: 10px;\n}\n\n#klifzfjzhc .gt_stub_row_group {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-right-style: solid;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  padding-left: 5px;\n  padding-right: 5px;\n  vertical-align: top;\n}\n\n#klifzfjzhc .gt_row_group_first td {\n  border-top-width: 2px;\n}\n\n#klifzfjzhc .gt_row_group_first th {\n  border-top-width: 2px;\n}\n\n#klifzfjzhc .gt_summary_row {\n  color: #333333;\n  background-color: #FFFFFF;\n  text-transform: inherit;\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#klifzfjzhc .gt_first_summary_row {\n  border-top-style: solid;\n  border-top-color: #D3D3D3;\n}\n\n#klifzfjzhc .gt_first_summary_row.thick {\n  border-top-width: 2px;\n}\n\n#klifzfjzhc .gt_last_summary_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#klifzfjzhc .gt_grand_summary_row {\n  color: #333333;\n  background-color: #FFFFFF;\n  text-transform: inherit;\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#klifzfjzhc .gt_first_grand_summary_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-top-style: double;\n  border-top-width: 6px;\n  border-top-color: #D3D3D3;\n}\n\n#klifzfjzhc .gt_last_grand_summary_row_top {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-bottom-style: double;\n  border-bottom-width: 6px;\n  border-bottom-color: #D3D3D3;\n}\n\n#klifzfjzhc .gt_striped {\n  background-color: rgba(128, 128, 128, 0.05);\n}\n\n#klifzfjzhc .gt_table_body {\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#klifzfjzhc .gt_footnotes {\n  color: #333333;\n  background-color: #FFFFFF;\n  border-bottom-style: none;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n}\n\n#klifzfjzhc .gt_footnote {\n  margin: 0px;\n  font-size: 90%;\n  padding-top: 4px;\n  padding-bottom: 4px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#klifzfjzhc .gt_sourcenotes {\n  color: #333333;\n  background-color: #FFFFFF;\n  border-bottom-style: none;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n}\n\n#klifzfjzhc .gt_sourcenote {\n  font-size: 12px;\n  padding-top: 4px;\n  padding-bottom: 4px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#klifzfjzhc .gt_left {\n  text-align: left;\n}\n\n#klifzfjzhc .gt_center {\n  text-align: center;\n}\n\n#klifzfjzhc .gt_right {\n  text-align: right;\n  font-variant-numeric: tabular-nums;\n}\n\n#klifzfjzhc .gt_font_normal {\n  font-weight: normal;\n}\n\n#klifzfjzhc .gt_font_bold {\n  font-weight: bold;\n}\n\n#klifzfjzhc .gt_font_italic {\n  font-style: italic;\n}\n\n#klifzfjzhc .gt_super {\n  font-size: 65%;\n}\n\n#klifzfjzhc .gt_footnote_marks {\n  font-size: 75%;\n  vertical-align: 0.4em;\n  position: initial;\n}\n\n#klifzfjzhc .gt_asterisk {\n  font-size: 100%;\n  vertical-align: 0;\n}\n\n#klifzfjzhc .gt_indent_1 {\n  text-indent: 5px;\n}\n\n#klifzfjzhc .gt_indent_2 {\n  text-indent: 10px;\n}\n\n#klifzfjzhc .gt_indent_3 {\n  text-indent: 15px;\n}\n\n#klifzfjzhc .gt_indent_4 {\n  text-indent: 20px;\n}\n\n#klifzfjzhc .gt_indent_5 {\n  text-indent: 25px;\n}\n\n#klifzfjzhc .katex-display {\n  display: inline-flex !important;\n  margin-bottom: 0.75em !important;\n}\n\n#klifzfjzhc div.Reactable > div.rt-table > div.rt-thead > div.rt-tr.rt-tr-group-header > div.rt-th-group:after {\n  height: 0px !important;\n}\n</style>\n<table class=\"gt_table\" style=\"table-layout:fixed;\" data-quarto-disable-processing=\"false\" data-quarto-bootstrap=\"false\">\n  <colgroup>\n    <col/>\n    <col/>\n    <col style=\"width:100px;\"/>\n  </colgroup>\n  <thead>\n    <tr class=\"gt_col_headings\">\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_left\" rowspan=\"1\" colspan=\"1\" style=\"border-bottom-width: 3px; border-bottom-style: solid; border-bottom-color: black;\" scope=\"col\" id=\"language\">Top Language</th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\" style=\"border-bottom-width: 3px; border-bottom-style: solid; border-bottom-color: black;\" scope=\"col\" id=\"n\">Count</th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_left\" rowspan=\"1\" colspan=\"1\" style=\"border-bottom-width: 3px; border-bottom-style: solid; border-bottom-color: black;\" scope=\"col\" id=\"x_scaled\">Percent of Total </th>\n    </tr>\n  </thead>\n  <tbody class=\"gt_table_body\">\n    <tr><td headers=\"language\" class=\"gt_row gt_left\">R</td>\n<td headers=\"n\" class=\"gt_row gt_right\">149</td>\n<td headers=\"x_scaled\" class=\"gt_row gt_left\"><div style='flex-grow:1;margin-left:8px;background:#e1e1e1;'><div style='background:#48c8df;width:46.7084639498433%;height:16px;display:flex;align-items:center;justify-content:flex-start;position:relative;'><span style='color:#000000;position:absolute;left:0px;margin-left:5px;font-weight:bold;font-size:12px;'>46.7%</span></div></div></td></tr>\n    <tr><td headers=\"language\" class=\"gt_row gt_left\">Python</td>\n<td headers=\"n\" class=\"gt_row gt_right\">73</td>\n<td headers=\"x_scaled\" class=\"gt_row gt_left\"><div style='flex-grow:1;margin-left:8px;background:#e1e1e1;'><div style='background:#48c8df;width:22.884012539185%;height:16px;display:flex;align-items:center;justify-content:flex-start;position:relative;'><span style='color:#000000;position:absolute;left:0px;margin-left:5px;font-weight:bold;font-size:12px;'>22.9%</span></div></div></td></tr>\n    <tr><td headers=\"language\" class=\"gt_row gt_left\">null</td>\n<td headers=\"n\" class=\"gt_row gt_right\">42</td>\n<td headers=\"x_scaled\" class=\"gt_row gt_left\"><div style='flex-grow:1;margin-left:8px;background:#e1e1e1;'><div style='background:#48c8df;width:13.166144200627%;height:16px;display:flex;align-items:center;justify-content:center;color:#000000;font-weight:bold;font-size:12px;position:relative;'><span style='color:#000000;position:absolute;left:0%;margin-left:13.166144200627px;font-weight:bold;font-size:12px;'>13.2%</span></div></div></td></tr>\n    <tr><td headers=\"language\" class=\"gt_row gt_left\">Jupyter Notebook</td>\n<td headers=\"n\" class=\"gt_row gt_right\">18</td>\n<td headers=\"x_scaled\" class=\"gt_row gt_left\"><div style='flex-grow:1;margin-left:8px;background:#e1e1e1;'><div style='background:#48c8df;width:5.64263322884013%;height:16px;display:flex;align-items:center;justify-content:center;color:#000000;font-weight:bold;font-size:12px;position:relative;'><span style='color:#000000;position:absolute;left:0%;margin-left:5.64263322884012px;font-weight:bold;font-size:12px;'>5.6%</span></div></div></td></tr>\n    <tr><td headers=\"language\" class=\"gt_row gt_left\">SAS</td>\n<td headers=\"n\" class=\"gt_row gt_right\">8</td>\n<td headers=\"x_scaled\" class=\"gt_row gt_left\"><div style='flex-grow:1;margin-left:8px;background:#e1e1e1;'><div style='background:#48c8df;width:2.50783699059561%;height:16px;display:flex;align-items:center;justify-content:center;color:#000000;font-weight:bold;font-size:12px;position:relative;'><span style='color:#000000;position:absolute;left:0%;margin-left:2.50783699059561px;font-weight:bold;font-size:12px;'>2.5%</span></div></div></td></tr>\n    <tr><td headers=\"language\" class=\"gt_row gt_left\">TSQL</td>\n<td headers=\"n\" class=\"gt_row gt_right\">7</td>\n<td headers=\"x_scaled\" class=\"gt_row gt_left\"><div style='flex-grow:1;margin-left:8px;background:#e1e1e1;'><div style='background:#48c8df;width:2.19435736677116%;height:16px;display:flex;align-items:center;justify-content:center;color:#000000;font-weight:bold;font-size:12px;position:relative;'><span style='color:#000000;position:absolute;left:0%;margin-left:2.19435736677116px;font-weight:bold;font-size:12px;'>2.2%</span></div></div></td></tr>\n    <tr><td headers=\"language\" class=\"gt_row gt_left\">Batchfile</td>\n<td headers=\"n\" class=\"gt_row gt_right\">6</td>\n<td headers=\"x_scaled\" class=\"gt_row gt_left\"><div style='flex-grow:1;margin-left:8px;background:#e1e1e1;'><div style='background:#48c8df;width:1.88087774294671%;height:16px;display:flex;align-items:center;justify-content:center;color:#000000;font-weight:bold;font-size:12px;position:relative;'><span style='color:#000000;position:absolute;left:0%;margin-left:1.88087774294671px;font-weight:bold;font-size:12px;'>1.9%</span></div></div></td></tr>\n    <tr><td headers=\"language\" class=\"gt_row gt_left\">TeX</td>\n<td headers=\"n\" class=\"gt_row gt_right\">5</td>\n<td headers=\"x_scaled\" class=\"gt_row gt_left\"><div style='flex-grow:1;margin-left:8px;background:#e1e1e1;'><div style='background:#48c8df;width:1.56739811912226%;height:16px;display:flex;align-items:center;justify-content:center;color:#000000;font-weight:bold;font-size:12px;position:relative;'><span style='color:#000000;position:absolute;left:0%;margin-left:1.56739811912226px;font-weight:bold;font-size:12px;'>1.6%</span></div></div></td></tr>\n    <tr><td headers=\"language\" class=\"gt_row gt_left\">HTML</td>\n<td headers=\"n\" class=\"gt_row gt_right\">4</td>\n<td headers=\"x_scaled\" class=\"gt_row gt_left\"><div style='flex-grow:1;margin-left:8px;background:#e1e1e1;'><div style='background:#48c8df;width:1.25391849529781%;height:16px;display:flex;align-items:center;justify-content:center;color:#000000;font-weight:bold;font-size:12px;position:relative;'><span style='color:#000000;position:absolute;left:0%;margin-left:1.25391849529781px;font-weight:bold;font-size:12px;'>1.3%</span></div></div></td></tr>\n    <tr><td headers=\"language\" class=\"gt_row gt_left\">Dockerfile</td>\n<td headers=\"n\" class=\"gt_row gt_right\">1</td>\n<td headers=\"x_scaled\" class=\"gt_row gt_left\"><div style='flex-grow:1;margin-left:8px;background:#e1e1e1;'><div style='background:#48c8df;width:0.313479623824451%;height:16px;display:flex;align-items:center;justify-content:center;color:#000000;font-weight:bold;font-size:12px;position:relative;'><span style='color:#000000;position:absolute;left:0%;margin-left:0.313479623824451px;font-weight:bold;font-size:12px;'>0.3%</span></div></div></td></tr>\n    <tr><td headers=\"language\" class=\"gt_row gt_left\">Java</td>\n<td headers=\"n\" class=\"gt_row gt_right\">1</td>\n<td headers=\"x_scaled\" class=\"gt_row gt_left\"><div style='flex-grow:1;margin-left:8px;background:#e1e1e1;'><div style='background:#48c8df;width:0.313479623824451%;height:16px;display:flex;align-items:center;justify-content:center;color:#000000;font-weight:bold;font-size:12px;position:relative;'><span style='color:#000000;position:absolute;left:0%;margin-left:0.313479623824451px;font-weight:bold;font-size:12px;'>0.3%</span></div></div></td></tr>\n    <tr><td headers=\"language\" class=\"gt_row gt_left\">JavaScript</td>\n<td headers=\"n\" class=\"gt_row gt_right\">1</td>\n<td headers=\"x_scaled\" class=\"gt_row gt_left\"><div style='flex-grow:1;margin-left:8px;background:#e1e1e1;'><div style='background:#48c8df;width:0.313479623824451%;height:16px;display:flex;align-items:center;justify-content:center;color:#000000;font-weight:bold;font-size:12px;position:relative;'><span style='color:#000000;position:absolute;left:0%;margin-left:0.313479623824451px;font-weight:bold;font-size:12px;'>0.3%</span></div></div></td></tr>\n    <tr><td headers=\"language\" class=\"gt_row gt_left\">Rebol</td>\n<td headers=\"n\" class=\"gt_row gt_right\">1</td>\n<td headers=\"x_scaled\" class=\"gt_row gt_left\"><div style='flex-grow:1;margin-left:8px;background:#e1e1e1;'><div style='background:#48c8df;width:0.313479623824451%;height:16px;display:flex;align-items:center;justify-content:center;color:#000000;font-weight:bold;font-size:12px;position:relative;'><span style='color:#000000;position:absolute;left:0%;margin-left:0.313479623824451px;font-weight:bold;font-size:12px;'>0.3%</span></div></div></td></tr>\n    <tr><td headers=\"language\" class=\"gt_row gt_left\">Roff</td>\n<td headers=\"n\" class=\"gt_row gt_right\">1</td>\n<td headers=\"x_scaled\" class=\"gt_row gt_left\"><div style='flex-grow:1;margin-left:8px;background:#e1e1e1;'><div style='background:#48c8df;width:0.313479623824451%;height:16px;display:flex;align-items:center;justify-content:center;color:#000000;font-weight:bold;font-size:12px;position:relative;'><span style='color:#000000;position:absolute;left:0%;margin-left:0.313479623824451px;font-weight:bold;font-size:12px;'>0.3%</span></div></div></td></tr>\n    <tr><td headers=\"language\" class=\"gt_row gt_left\">Rust</td>\n<td headers=\"n\" class=\"gt_row gt_right\">1</td>\n<td headers=\"x_scaled\" class=\"gt_row gt_left\"><div style='flex-grow:1;margin-left:8px;background:#e1e1e1;'><div style='background:#48c8df;width:0.313479623824451%;height:16px;display:flex;align-items:center;justify-content:center;color:#000000;font-weight:bold;font-size:12px;position:relative;'><span style='color:#000000;position:absolute;left:0%;margin-left:0.313479623824451px;font-weight:bold;font-size:12px;'>0.3%</span></div></div></td></tr>\n    <tr><td headers=\"language\" class=\"gt_row gt_left\">Shell</td>\n<td headers=\"n\" class=\"gt_row gt_right\">1</td>\n<td headers=\"x_scaled\" class=\"gt_row gt_left\"><div style='flex-grow:1;margin-left:8px;background:#e1e1e1;'><div style='background:#48c8df;width:0.313479623824451%;height:16px;display:flex;align-items:center;justify-content:center;color:#000000;font-weight:bold;font-size:12px;position:relative;'><span style='color:#000000;position:absolute;left:0%;margin-left:0.313479623824451px;font-weight:bold;font-size:12px;'>0.3%</span></div></div></td></tr>\n  </tbody>\n  \n  \n</table>\n</div>\n```\n\n:::\n:::\n\n\n:::\n\n::: {focus-on=\"cr-ploty\"}\n\n\n::: {.cell}\n::: {.cell-output-display}\n\n```{=html}\n<div id=\"ahizlnbgau\" style=\"padding-left:0px;padding-right:0px;padding-top:10px;padding-bottom:10px;overflow-x:auto;overflow-y:auto;width:auto;height:auto;\">\n<style>@import url(\"https://fonts.googleapis.com/css2?family=JetBrains+Mono:ital,wght@0,100;0,200;0,300;0,400;0,500;0,600;0,700;0,800;0,900;1,100;1,200;1,300;1,400;1,500;1,600;1,700;1,800;1,900&display=swap\");\n#ahizlnbgau table {\n  font-family: 'JetBrains Mono', system-ui, 'Segoe UI', Roboto, Helvetica, Arial, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Noto Color Emoji';\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n}\n\n#ahizlnbgau thead, #ahizlnbgau tbody, #ahizlnbgau tfoot, #ahizlnbgau tr, #ahizlnbgau td, #ahizlnbgau th {\n  border-style: none;\n}\n\n#ahizlnbgau p {\n  margin: 0;\n  padding: 0;\n}\n\n#ahizlnbgau .gt_table {\n  display: table;\n  border-collapse: collapse;\n  line-height: normal;\n  margin-left: auto;\n  margin-right: auto;\n  color: #333333;\n  font-size: 16px;\n  font-weight: normal;\n  font-style: normal;\n  background-color: #FFFFFF;\n  width: auto;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #000000;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #000000;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n}\n\n#ahizlnbgau .gt_caption {\n  padding-top: 4px;\n  padding-bottom: 4px;\n}\n\n#ahizlnbgau .gt_title {\n  color: #333333;\n  font-size: 125%;\n  font-weight: initial;\n  padding-top: 4px;\n  padding-bottom: 4px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-bottom-color: #FFFFFF;\n  border-bottom-width: 0;\n}\n\n#ahizlnbgau .gt_subtitle {\n  color: #333333;\n  font-size: 85%;\n  font-weight: initial;\n  padding-top: 3px;\n  padding-bottom: 5px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-top-color: #FFFFFF;\n  border-top-width: 0;\n}\n\n#ahizlnbgau .gt_heading {\n  background-color: #FFFFFF;\n  text-align: left;\n  border-bottom-color: #FFFFFF;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n}\n\n#ahizlnbgau .gt_bottom_border {\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#ahizlnbgau .gt_col_headings {\n  border-top-style: solid;\n  border-top-width: 3px;\n  border-top-color: #000000;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n}\n\n#ahizlnbgau .gt_col_heading {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 80%;\n  font-weight: bolder;\n  text-transform: uppercase;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: bottom;\n  padding-top: 5px;\n  padding-bottom: 6px;\n  padding-left: 5px;\n  padding-right: 5px;\n  overflow-x: hidden;\n}\n\n#ahizlnbgau .gt_column_spanner_outer {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 80%;\n  font-weight: bolder;\n  text-transform: uppercase;\n  padding-top: 0;\n  padding-bottom: 0;\n  padding-left: 4px;\n  padding-right: 4px;\n}\n\n#ahizlnbgau .gt_column_spanner_outer:first-child {\n  padding-left: 0;\n}\n\n#ahizlnbgau .gt_column_spanner_outer:last-child {\n  padding-right: 0;\n}\n\n#ahizlnbgau .gt_column_spanner {\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  vertical-align: bottom;\n  padding-top: 5px;\n  padding-bottom: 5px;\n  overflow-x: hidden;\n  display: inline-block;\n  width: 100%;\n}\n\n#ahizlnbgau .gt_spanner_row {\n  border-bottom-style: hidden;\n}\n\n#ahizlnbgau .gt_group_heading {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 80%;\n  font-weight: bolder;\n  text-transform: uppercase;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: middle;\n  text-align: left;\n}\n\n#ahizlnbgau .gt_empty_group_heading {\n  padding: 0.5px;\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 80%;\n  font-weight: bolder;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  vertical-align: middle;\n}\n\n#ahizlnbgau .gt_from_md > :first-child {\n  margin-top: 0;\n}\n\n#ahizlnbgau .gt_from_md > :last-child {\n  margin-bottom: 0;\n}\n\n#ahizlnbgau .gt_row {\n  padding-top: 3px;\n  padding-bottom: 3px;\n  padding-left: 10px;\n  padding-right: 10px;\n  margin: 10px;\n  border-top-style: solid;\n  border-top-width: 1px;\n  border-top-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: middle;\n  overflow-x: hidden;\n}\n\n#ahizlnbgau .gt_stub {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 80%;\n  font-weight: bolder;\n  text-transform: uppercase;\n  border-right-style: solid;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  padding-left: 10px;\n  padding-right: 10px;\n}\n\n#ahizlnbgau .gt_stub_row_group {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-right-style: solid;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  padding-left: 5px;\n  padding-right: 5px;\n  vertical-align: top;\n}\n\n#ahizlnbgau .gt_row_group_first td {\n  border-top-width: 2px;\n}\n\n#ahizlnbgau .gt_row_group_first th {\n  border-top-width: 2px;\n}\n\n#ahizlnbgau .gt_summary_row {\n  color: #333333;\n  background-color: #FFFFFF;\n  text-transform: inherit;\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#ahizlnbgau .gt_first_summary_row {\n  border-top-style: solid;\n  border-top-color: #D3D3D3;\n}\n\n#ahizlnbgau .gt_first_summary_row.thick {\n  border-top-width: 2px;\n}\n\n#ahizlnbgau .gt_last_summary_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#ahizlnbgau .gt_grand_summary_row {\n  color: #333333;\n  background-color: #FFFFFF;\n  text-transform: inherit;\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#ahizlnbgau .gt_first_grand_summary_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-top-style: double;\n  border-top-width: 6px;\n  border-top-color: #D3D3D3;\n}\n\n#ahizlnbgau .gt_last_grand_summary_row_top {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-bottom-style: double;\n  border-bottom-width: 6px;\n  border-bottom-color: #D3D3D3;\n}\n\n#ahizlnbgau .gt_striped {\n  background-color: rgba(128, 128, 128, 0.05);\n}\n\n#ahizlnbgau .gt_table_body {\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#ahizlnbgau .gt_footnotes {\n  color: #333333;\n  background-color: #FFFFFF;\n  border-bottom-style: none;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n}\n\n#ahizlnbgau .gt_footnote {\n  margin: 0px;\n  font-size: 90%;\n  padding-top: 4px;\n  padding-bottom: 4px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#ahizlnbgau .gt_sourcenotes {\n  color: #333333;\n  background-color: #FFFFFF;\n  border-bottom-style: none;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n}\n\n#ahizlnbgau .gt_sourcenote {\n  font-size: 12px;\n  padding-top: 4px;\n  padding-bottom: 4px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#ahizlnbgau .gt_left {\n  text-align: left;\n}\n\n#ahizlnbgau .gt_center {\n  text-align: center;\n}\n\n#ahizlnbgau .gt_right {\n  text-align: right;\n  font-variant-numeric: tabular-nums;\n}\n\n#ahizlnbgau .gt_font_normal {\n  font-weight: normal;\n}\n\n#ahizlnbgau .gt_font_bold {\n  font-weight: bold;\n}\n\n#ahizlnbgau .gt_font_italic {\n  font-style: italic;\n}\n\n#ahizlnbgau .gt_super {\n  font-size: 65%;\n}\n\n#ahizlnbgau .gt_footnote_marks {\n  font-size: 75%;\n  vertical-align: 0.4em;\n  position: initial;\n}\n\n#ahizlnbgau .gt_asterisk {\n  font-size: 100%;\n  vertical-align: 0;\n}\n\n#ahizlnbgau .gt_indent_1 {\n  text-indent: 5px;\n}\n\n#ahizlnbgau .gt_indent_2 {\n  text-indent: 10px;\n}\n\n#ahizlnbgau .gt_indent_3 {\n  text-indent: 15px;\n}\n\n#ahizlnbgau .gt_indent_4 {\n  text-indent: 20px;\n}\n\n#ahizlnbgau .gt_indent_5 {\n  text-indent: 25px;\n}\n\n#ahizlnbgau .katex-display {\n  display: inline-flex !important;\n  margin-bottom: 0.75em !important;\n}\n\n#ahizlnbgau div.Reactable > div.rt-table > div.rt-thead > div.rt-tr.rt-tr-group-header > div.rt-th-group:after {\n  height: 0px !important;\n}\n</style>\n<table class=\"gt_table\" data-quarto-disable-processing=\"false\" data-quarto-bootstrap=\"false\">\n  <thead>\n    <tr class=\"gt_col_headings\">\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_left\" rowspan=\"1\" colspan=\"1\" style=\"border-bottom-width: 3px; border-bottom-style: solid; border-bottom-color: black;\" scope=\"col\" id=\"repo\">Repo</th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\" style=\"border-bottom-width: 3px; border-bottom-style: solid; border-bottom-color: black;\" scope=\"col\" id=\"commits\">Commits</th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_left\" rowspan=\"1\" colspan=\"1\" style=\"border-bottom-width: 3px; border-bottom-style: solid; border-bottom-color: black;\" scope=\"col\" id=\"language\">Top Language</th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_left\" rowspan=\"1\" colspan=\"1\" style=\"border-bottom-width: 3px; border-bottom-style: solid; border-bottom-color: black;\" scope=\"col\" id=\"url\">url</th>\n    </tr>\n  </thead>\n  <tbody class=\"gt_table_body\">\n    <tr><td headers=\"repo\" class=\"gt_row gt_left\">x</td>\n<td headers=\"commits\" class=\"gt_row gt_right\">4628</td>\n<td headers=\"language\" class=\"gt_row gt_left\">null</td>\n<td headers=\"url\" class=\"gt_row gt_left\">github.com/x/x/x</td></tr>\n    <tr><td headers=\"repo\" class=\"gt_row gt_left\">x</td>\n<td headers=\"commits\" class=\"gt_row gt_right\">1748</td>\n<td headers=\"language\" class=\"gt_row gt_left\">Python</td>\n<td headers=\"url\" class=\"gt_row gt_left\">github.com/x/x/x</td></tr>\n    <tr><td headers=\"repo\" class=\"gt_row gt_left\">x</td>\n<td headers=\"commits\" class=\"gt_row gt_right\">1199</td>\n<td headers=\"language\" class=\"gt_row gt_left\">R</td>\n<td headers=\"url\" class=\"gt_row gt_left\">github.com/x/x/x</td></tr>\n    <tr><td headers=\"repo\" class=\"gt_row gt_left\">x</td>\n<td headers=\"commits\" class=\"gt_row gt_right\">1045</td>\n<td headers=\"language\" class=\"gt_row gt_left\">HTML</td>\n<td headers=\"url\" class=\"gt_row gt_left\">github.com/x/x/x</td></tr>\n    <tr><td headers=\"repo\" class=\"gt_row gt_left\">x</td>\n<td headers=\"commits\" class=\"gt_row gt_right\">1045</td>\n<td headers=\"language\" class=\"gt_row gt_left\">Python</td>\n<td headers=\"url\" class=\"gt_row gt_left\">github.com/x/x/x</td></tr>\n  </tbody>\n  \n  \n</table>\n</div>\n```\n\n:::\n:::\n\n\n:::\n::::::\n\n::: {#cr-ploty}\n\n\n```{ojs}\n\nnode_data = FileAttachment(\"repo_data_test.csv\").csv()\n\n\nnodes = node_data.map(d => Object.create(d))\n\n// bfScale = d3.scaleLinear()\n//   .domain([1, 5])\n//   .range([1930, 2020])\n//   .clamp(true)\n    \nscan = crTriggerIndex\n\nchart_param = ({\n  width: width,\n  height: 600,\n  margin: {\n    top: 50,\n    right: 40,\n    bottom: 80,\n    left: 60,\n    center: 150\n  }\n})\n\nchart = {\n  // Define base scales for positioning circles\n  const x = d3.scaleLinear()\n    .domain([0, 1])\n    .range([chart_param.margin.left, chart_param.width - chart_param.margin.right]);\n\n  const y = d3.scaleLinear()\n    .domain([0, 1])\n    .range([chart_param.height - chart_param.margin.bottom, chart_param.margin.top]);\n\n  // Initialize SVG container\n  const svg = d3.select(DOM.svg(chart_param.width, chart_param.height));\n\n  // Append title and subtitle\n  svg.append(\"text\")\n    .attr(\"x\", chart_param.width / 2)\n    .attr(\"y\", chart_param.margin.top - 25)\n    .attr(\"text-anchor\", \"middle\")\n    .attr(\"font-size\", \"20px\")\n    .attr(\"font-weight\", \"bold\")\n    .text(\"Beeswarm Plot of GitHub Repos Over Time\");\n\n  svg.append(\"text\")\n    .attr(\"x\", chart_param.width / 2)\n    .attr(\"y\", chart_param.margin.top - 10)\n    .attr(\"text-anchor\", \"middle\")\n    .attr(\"font-size\", \"14px\")\n    .attr(\"font-weight\", \"normal\")\n    .text(\"A visualization of repositories in the DOH-EPI-Coders organization\");\n\n  // Preprocess data: Map any language that isn't \"R\" or \"Python\" to \"Other\"\n  node_data.forEach(d => {\n    if (d.language === \"Jupyter Notebook\") {\n      d.language = \"Python\";\n    } else if (d.language !== \"R\" && d.language !== \"Python\") {\n      d.language = \"Other\";\n    }\n  });\n\n  // Group nodes by language using d3.group\n  const languages = d3.group(node_data, d => d.language);\n\n  // Viridis colors for languages\n  const colorScale = d3.scaleOrdinal()\n  .domain([\"R\", \"Python\", \"Other\"])  // List of languages you want to color\n  .range([\"#440154\", \"#3B528B\", \"#287D49\"]);  // Adjusted Viridis colors with more green\n\n  // Scale for node radius based on the number of commits\n  const radiusScale = d3.scaleLog()\n    .domain([1, 5000])  // Adjust the domain to your data range\n    .range([1, 13]);      // Adjust the range for the circle radius\n\n  // Define x scale based on create_date for grouping by date\n  const xScale = d3.scaleTime()\n    .domain([new Date(\"2020-01-01\"), new Date(\"2026-01-01\")]) // Set date range\n    .range([chart_param.margin.left, chart_param.width - chart_param.margin.right]);\n\n  // Set up the y-scale based on language groups\n  const yScale = d3.scaleBand()\n    .domain(Array.from(languages.keys()))  // Use the language groups as domain\n    .range([chart_param.margin.top, chart_param.height - chart_param.margin.bottom])\n    .padding(0.1);  // Add padding for spacing between the groups\n\n  function createNodes(scan) {\n    // Sort repos by commits in descending order and get the top 5 for scan == 3\n    const topRepos = scan === 3 ? node_data.sort((a, b) => b.commits - a.commits).slice(0, 5) : [];\n    const topRepoCommits = new Set(topRepos.map(d => d.commits));\n\n    // Initialize simulation with the base forces\n    const sim = d3\n      .forceSimulation(node_data)\n      .force(\"x\", d3.forceX(d => xScale(new Date(d.create_date))))  // Position along the X-axis based on create_date\n      .force(\"collide\", d3.forceCollide().radius(d => radiusScale(d.commits) + 1).strength(0.5));  // Default collision force\n\n    // If `scan > 1`, apply additional forces for language grouping\n    if (scan > 1) {\n      // Apply additional y-force to divide nodes by language\n      sim.force(\"y\", d3.forceY(d => yScale(d.language) + 70))  // Position nodes along y-axis based on language\n        .force(\"collide\", d3.forceCollide().radius(d => radiusScale(d.commits) + 1).strength(0.8));  // Adjust collision force\n\n      // Create x-axis for years\n      const xAxis = d3.axisBottom(xScale).tickFormat(d3.timeFormat(\"%Y\"));\n      const xAxisGroup = svg.append(\"g\")\n      .attr(\"transform\", `translate(0, ${chart_param.height - chart_param.margin.bottom})`)\n      .call(xAxis);\n    \n        // Style x-axis labels (make them bold and larger)\n        xAxisGroup.selectAll(\"text\")\n        .attr(\"font-size\", \"16px\")    // Set font size to 16px or any value you prefer\n        .attr(\"font-weight\", \"bold\"); // Make the labels bold\n\n        // Create y-axis for language groups\n        const yAxis = d3.axisLeft(yScale);\n        const yAxisGroup = svg.append(\"g\")\n        .attr(\"transform\", `translate(${chart_param.margin.left}, 0)`)\n        .call(yAxis);\n        \n        // Style y-axis labels (make them bold and larger)\n        yAxisGroup.selectAll(\"text\")\n        .attr(\"font-size\", \"15px\")    // Set font size to 16px or any value you prefer\n        .attr(\"font-weight\", \"bold\"); // Make the labels bold\n      \n    } else {\n      // For `scan === 1`, apply the default force with no language division\n      sim.force(\"y\", d3.forceY(chart_param.height / 2))  // All nodes at the center of Y-axis\n        .force(\"collide\", d3.forceCollide().radius(d => radiusScale(d.commits) + 1).strength(0.5));  // Default collision force\n\n      // Create x-axis for years\n      const xAxis = d3.axisBottom(xScale).tickFormat(d3.timeFormat(\"%Y\"));\n      const xAxisGroup = svg.append(\"g\")\n      .attr(\"transform\", `translate(0, ${chart_param.height - chart_param.margin.bottom})`)\n      .call(xAxis);\n    \n    // Style x-axis labels (make them bold and larger)\n    xAxisGroup.selectAll(\"text\")\n      .attr(\"font-size\", \"16px\")    // Set font size to 16px or any value you prefer\n      .attr(\"font-weight\", \"bold\"); // Make the labels bold\n\n    }\n\n    // Restart the simulation to apply the changes\n    sim.alpha(1)\n      .alphaDecay(0.05)\n      .restart();\n\n    // Bind data and draw nodes\n    const node = svg.selectAll(\".node\")\n      .data(node_data)\n      .enter()\n      .append(\"circle\")\n      .attr(\"class\", \"node\")\n      .attr(\"r\", d => radiusScale(d.commits))  // Set the radius based on the 'commits' field\n      .attr(\"cx\", d => xScale(new Date(d.create_date)))  // Set initial x position based on date\n      .attr(\"cy\", d => scan > 1 ? yScale(d.language) : chart_param.height / 2)  // Correct y position based on language\n      .style(\"fill\", (d) => topRepoCommits.has(d.commits) ? \"orange\" : colorScale(d.language))  // Highlight top 5 repos with orange\n      .style(\"opacity\", (d) => topRepoCommits.has(d.commits) ? 1 : 0.6);  // Lower opacity for non-top 5 repos\n\n    // Add tooltips with repo info\n    node.append(\"title\")\n      .text(d =>\n        `Repo: ${d.repo}\\n` +\n        `Commits: ${d.commits}\\n` +\n        `Contributors: ${d.contributors}\\n` +\n        `Create Date: ${d.create_date}`\n      );\n\n    // Hover effect to change circle color to red on mouseover, revert on mouseout\n    node.on(\"mouseover\", function(event, d) {\n    d3.select(this)\n      .attr(\"fill\", \"red\")  // Change the fill color to red on mouseover\n      .attr(\"stroke\", \"black\")  // Add black border\n      .attr(\"stroke-width\", 2);  // Set the border width\n  })\n  .on(\"mouseout\", function(event, d) {\n    d3.select(this)\n      .attr(\"fill\", (d) => topRepoCommits.has(d.commits) ? \"orange\" : colorScale(d.language))  // Reset the fill color\n      .attr(\"stroke\", null)  // Remove the border on mouse out\n      .attr(\"stroke-width\", null);  // Reset the border width\n  });\n\n    // Show detailed data on click with line breaks\n    node.on(\"click\", function(event, d) {\n      const clickTooltip = d3.select(\"body\").append(\"div\")\n        .attr(\"class\", \"click-tooltip\")\n        .style(\"position\", \"absolute\")\n        .style(\"visibility\", \"hidden\")\n        .style(\"background\", \"rgba(0, 0, 0, 0.7)\")\n        .style(\"color\", \"white\")\n        .style(\"border-radius\", \"4px\")\n        .style(\"padding\", \"10px\")\n        .style(\"font-size\", \"14px\")\n        .html(`\n          <strong>Repo:</strong> ${d.repo}<br>\n          <strong>Commits:</strong> ${d.commits}<br>\n          <strong>Contributors:</strong> ${d.contributors}<br>\n          <strong>Create Date:</strong> ${d.create_date}\n        `);\n\n      clickTooltip.style(\"visibility\", \"visible\")\n        .style(\"top\", `${event.pageY + 10}px`)\n        .style(\"left\", `${event.pageX + 10}px`);\n\n      // Close the click tooltip after 3 seconds (optional)\n      setTimeout(() => {\n        d3.select(\".click-tooltip\").remove();\n      }, 3000);\n    });\n\n    // Update circle positions on each tick of the simulation\n    sim.on(\"tick\", () => {\n      node\n        .attr(\"cx\", d => d.x)\n        .attr(\"cy\", d => d.y);\n    });\n  }\n\n  // Main logic to check `scan` value and call createNodes accordingly\n  createNodes(scan);  // Pass `scan` to createNodes to handle the different plot configurations\n\n  return svg.node();\n};\n```\n\n\n:::\n::::::::\n\n<br> <br>\n\n## How it works\n\nThe [closeread docs for ojs are great](https://closeread.dev/gallery/demos/ojs-variables/) - I highly recommend reading through that document.\n\nThey use `crProgressBlock` as a variable to indicate how far along the page a user has scrolled.\n\nThey then take that variable and apply some basic math to it. For example, when the user starts scrolling at 0%, they set the variable `angle1` to be `-180`. And `angle1` will change as the user scrolls down until it gets to angle = `0`. Like this:\n\n``` markdown\nangleScale1 = d3.scaleLinear()\n  .domain([0, 1])\n  .range([-180, 0])\n  .clamp(true)\n    \nangle1 = angleScale1(crProgressBlock)\n```\n\n## What you need to do - user scroll locations\n\n1.  put this chunk in your quarto document and run `quarto preview`. Note that the last variable is a variable you can derive\n\n```` yaml\n:::{.counter style=\"position: fixed; top: 10px; right: 10px; background-color: skyblue; border-radius: 5px; padding: 18px 18px 0 18px; line-height: .8em;\"}\n```{ojs}\nmd`Active sticky: ${crActiveSticky}`\nmd`Active trigger: ${crTriggerIndex}`\nmd`Trigger progress: ${(crTriggerProgress * 100).toFixed(1)}%`\nmd`Scroll direction: ${crDirection}`\nmd`Progress Block progress: ${(crProgressBlock * 100).toFixed(1)}%`\nmd`-----`\nmd`(derived) derived var1: ${bf1.toFixed(1)}°`\n```\n:::\n````\n\n2.  scroll on the script and the blue tab on the upper right will tell you what those variables equal when the user scrolls through the site\n\n3.  now you can see how variables change\n\n4.  assign that variable to something in ojs, such as `scan = crTriggerIndex`\n\n## What you need to do - learn some D3\n\nNow you have `scan = crTriggerIndex`, a variable in ojs that gets updated when a user scrolls. We can use this variable in our plot.\n\n1.  I used [D3.js](https://d3js.org/) to make the beeswarm plot\n\n2.  use [Observable](https://observablehq.com/) to design the plot (and chatGPT to guide you with the code)\n\n3.  for a D3.js introduction, you **NEED** to [read this document](https://observablehq.com/@ben-tanen/a-tutorial-to-using-d3-force-from-someone-who-just-learned-ho)\n\n    -   especially this part: it shows how D3 visuals are broken down into parts\n\n> Structure of d3-force simulations Before we dive into the specific forces that we'll use, let's briefly discuss the general structure used to create a force-directed graph.\n\n> // 1. create a copy of the node data `nodes = node_data.map(d =\\> Object.create(d))`\n>\n> // 2. create new force simulation specifying the forces to use // and, in our case, how many \"ticks\" or frames we'll want to simulate \n\n```markdown\nsim = d3.forceSimulation(nodes) .force(\"force_name\", ...) // ... chain together as many forces as we want .stop() .tick(n_frames_to_simulate)\n```\n>\n> // 3. bind data and draw nodes \n> `node = svg.selectAll(\".node\") .data(nodes).enter() // ... specify node position, radius, etc. as we normally would`\n>\n> // 4. indicate how we should update the graph for each tick \n\n> `sim.on(\"tick\", () =\\> { // ... specify how we should move nodes/edges given new positional data })`\n\n> **Step one** is to create a copy of our initial node data (position, radius, etc.) so that we can pass this copy rather than our original data to `d3.forceSimulation()`. This is because as we simulate forces, the `d3.forceSimulation()` function will update whatever array of data we pass it to reflect how forces are influencing our nodes so if we have any intention of re-using our initial node data after we start simulating, we'll want to copy it first. However, if you are only doing one simulation and do not need preserve the initial data, you don't necessarily need to worry about copying your data.\n>\n> **Step two** is to actually make our simulation by first passing our (copied) array of data to `d3.forceSimulation()`. We can then add/chain whatever forces we would like to use with `force(...)` (more on this below). In our case, once we have defined the behavior of the simulation, we will then explictly stop the simulation before it has a chance to start so that we can specify how many frames or ticks we would like to run of our simulation. We do this below so that we can control where we are in the simulation with scrubbers, but without doing this, the simulation will simply start and continue to run on it's own.\n>\n> **Step three** is to simply bind our data and draw our nodes as we would for any static graph. Because we are binding our nodes to the same data that is passed to `d3.forceSimulation()`, as our simulation runs, we can simply rely on the next and final step to update our nodes with new positioning.\n>\n> **Step four** is to end by indicating how we should update our nodes at each step as the simulation applies forces. The simulation will be updating the underlying positional data array (`nodes`) that is already bound to our drawn elements so we just have specify moving each node to its new position.\n\n\n## What you need to do - put it together\n\nI went back and forth with chatGPT *a lot*, and I read a lot of documentation to make the visual. But it was worth it. I feel like I have a better understanding of D3. \n\n1. For my beeswarm plot, I make a base plot that has minimal D3 forces applied to it, it looks like this:\n\n```markdown\n// Initialize simulation with the base forces\n    const sim = d3\n      .forceSimulation(node_data)\n      .force(\"x\", d3.forceX(d => xScale(new Date(d.create_date))))  // Position along the X-axis based on create_date\n      .force(\"collide\", d3.forceCollide().radius(d => radiusScale(d.commits) + 1).strength(0.5));  // Default collision force\n\n```\n\n2. Then I used the `scan` variable I created above that is linked to closeread's scroll trigger to dynamically add new D3 forces to the plot:\n\n```markdown\n// If `scan > 1`, apply additional forces for language grouping\nif (scan > 1) {\n  // Apply additional y-force to divide nodes by language\n  sim.force(\"y\", d3.forceY(d => yScale(d.language) + 70))  // Position nodes along y-axis based on language\n    .force(\"collide\", d3.forceCollide().radius(d => radiusScale(d.commits) + 1).strength(0.8));  // Adjust collision force\n\n  // Create x-axis for years\n  const xAxis = d3.axisBottom(xScale).tickFormat(d3.timeFormat(\"%Y\"));\n  const xAxisGroup = svg.append(\"g\")\n  .attr(\"transform\", `translate(0, ${chart_param.height - chart_param.margin.bottom})`)\n  .call(xAxis);\n\n    // Style x-axis labels (make them bold and larger)\n    xAxisGroup.selectAll(\"text\")\n    .attr(\"font-size\", \"16px\")    // Set font size to 16px or any value you prefer\n    .attr(\"font-weight\", \"bold\"); // Make the labels bold\n\n    // Create y-axis for language groups\n    const yAxis = d3.axisLeft(yScale);\n    const yAxisGroup = svg.append(\"g\")\n    .attr(\"transform\", `translate(${chart_param.margin.left}, 0)`)\n    .call(yAxis);\n    \n    // Style y-axis labels (make them bold and larger)\n    yAxisGroup.selectAll(\"text\")\n    .attr(\"font-size\", \"15px\")    // Set font size to 16px or any value you prefer\n    .attr(\"font-weight\", \"bold\"); // Make the labels bold\n  \n} else {\n  // For `scan === 1`, apply the default force with no language division\n  sim.force(\"y\", d3.forceY(chart_param.height / 2))  // All nodes at the center of Y-axis\n    .force(\"collide\", d3.forceCollide().radius(d => radiusScale(d.commits) + 1).strength(0.5));  // Default collision force\n\n  // Create x-axis for years\n  const xAxis = d3.axisBottom(xScale).tickFormat(d3.timeFormat(\"%Y\"));\n  const xAxisGroup = svg.append(\"g\")\n  .attr(\"transform\", `translate(0, ${chart_param.height - chart_param.margin.bottom})`)\n  .call(xAxis);\n\n// Style x-axis labels (make them bold and larger)\nxAxisGroup.selectAll(\"text\")\n  .attr(\"font-size\", \"16px\")    // Set font size to 16px or any value you prefer\n  .attr(\"font-weight\", \"bold\"); // Make the labels bold\n\n}\n\n```\n\n3. You can see a conditional statement: when `scan >1` then the plot will get split into a plot by the `language` variable, and a new y axis will be added to the plot. Else, when `scan === 1` then the plot has a base force with the regular x axis only\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}