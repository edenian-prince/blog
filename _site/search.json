[
  {
    "objectID": "posts/2024-08-21-translate-md-files/index.html#md-parse",
    "href": "posts/2024-08-21-translate-md-files/index.html#md-parse",
    "title": "Translating Quarto (and other markdown files) into Any Language",
    "section": "md parse",
    "text": "md parse\nThe lightparser package is fantastic (and light!). It will take the qmd or rmd and return a tibble of its elements.\n\n(parsed &lt;- lightparser::split_to_tbl('_english.qmd'))\n\nIt seems you are currently knitting a Rmd/Qmd file. The parsing of the file will be done in a new R session.\n\n\n# A tibble: 8 × 8\n  type    label           params       text  code  heading heading_level section\n  &lt;chr&gt;   &lt;chr&gt;           &lt;list&gt;       &lt;nam&gt; &lt;lis&gt; &lt;chr&gt;           &lt;dbl&gt; &lt;chr&gt;  \n1 yaml    &lt;NA&gt;            &lt;named list&gt; &lt;lgl&gt; &lt;lgl&gt; &lt;NA&gt;               NA &lt;NA&gt;   \n2 inline  &lt;NA&gt;            &lt;lgl [1]&gt;    &lt;chr&gt; &lt;lgl&gt; &lt;NA&gt;               NA &lt;NA&gt;   \n3 heading &lt;NA&gt;            &lt;lgl [1]&gt;    &lt;chr&gt; &lt;lgl&gt; Quarto              1 Quarto \n4 inline  &lt;NA&gt;            &lt;lgl [1]&gt;    &lt;chr&gt; &lt;lgl&gt; &lt;NA&gt;               NA Quarto \n5 heading &lt;NA&gt;            &lt;lgl [1]&gt;    &lt;chr&gt; &lt;lgl&gt; Automa…             1 Automa…\n6 inline  &lt;NA&gt;            &lt;lgl [1]&gt;    &lt;chr&gt; &lt;lgl&gt; &lt;NA&gt;               NA Automa…\n7 block   unnamed-chunk-1 &lt;named list&gt; &lt;lgl&gt; &lt;chr&gt; &lt;NA&gt;               NA Automa…\n8 inline  &lt;NA&gt;            &lt;lgl [1]&gt;    &lt;chr&gt; &lt;lgl&gt; &lt;NA&gt;               NA Automa…"
  },
  {
    "objectID": "posts/2024-08-21-translate-md-files/index.html#md-translate",
    "href": "posts/2024-08-21-translate-md-files/index.html#md-translate",
    "title": "Translating Quarto (and other markdown files) into Any Language",
    "section": "md translate",
    "text": "md translate\nunnest the text and apply the translate function\n\n\nparsed_es &lt;- parsed |&gt;\n  tidyr::unnest(cols = text) |&gt;\n  dplyr::mutate(text_es = \n    purrr::map(text,translatemd::translate)\n  )\n\n\nlet’s see what it looks like.\nparsed_es |&gt;\n  tidyr::unnest(cols = text_es) |&gt;\n  dplyr::select(type,text) |&gt;\n  head()\nparsed_es |&gt;\n  tidyr::unnest(cols = text_es) |&gt;\n  dplyr::select(type,text_es) |&gt;\n  head()\n\n\n\n# A tibble: 6 × 2\n  type    text                                                                  \n  &lt;chr&gt;   &lt;chr&gt;                                                                 \n1 heading # Quarto                                                              \n2 inline  Quarto enables you to weave together content and executable code into…\n3 inline  To create the release cycle in your repo you may want to use Conventi…\n4 inline  Conventional Commits are a way to format and standardize your commit …\n5 inline  -   The word `feat:` can trigger a Github Action to add that commit t…\n6 inline  -   and it will up-version the minor release version number.          \n\n\n# A tibble: 6 × 2\n  type    text_es                                                               \n  &lt;chr&gt;   &lt;chr&gt;                                                                 \n1 heading # Quarto                                                              \n2 inline  Quarto le permite entretejer el contenido y el código ejecutable en u…\n3 inline  Para crear el ciclo de lanzamiento en su repo es posible que desee ut…\n4 inline  Commits convencionales son una forma de formatear y estandarizar sus …\n5 inline  - La palabra `feat:` puede activar una acción de Github para añadir q…\n6 inline  - y subirá el número de versión de lanzamiento menor."
  },
  {
    "objectID": "posts/2024-08-21-translate-md-files/index.html#write-to-new-qmd",
    "href": "posts/2024-08-21-translate-md-files/index.html#write-to-new-qmd",
    "title": "Translating Quarto (and other markdown files) into Any Language",
    "section": "write to new qmd",
    "text": "write to new qmd\nclean up and write to new\n\n\nparsed_es_to_qmd &lt;- parsed_es |&gt;\n  dplyr::select(-text) |&gt;\n  dplyr::rename(text = text_es)\n\n# output to qmd\nlightparser::combine_tbl_to_file(\n  parsed_es_to_qmd,\n  \"_spanish.qmd\"\n)"
  },
  {
    "objectID": "posts/2024-09-11-linking-code-quarto/index.html",
    "href": "posts/2024-09-11-linking-code-quarto/index.html",
    "title": "Automatically link code to your documentation",
    "section": "",
    "text": "A couple months ago I bought a new laptop from a company called Framework. The laptop is completely modular and repairable - you can easily swap out whatever component you want and replace it. And it is so easy to fix and swap out components that the company gives you the option to put together the laptop yourself when they ship it to you (a DIY laptop!).\nI got to put in the RAM and storage, I pieced together the keyboard to the main board, and I installed Ubuntu for the first time in my life. And it was all.. way easier than I expected. Framework labels every component of the computer with a QR code that links to detailed and rich documentation about installing the component. So if you’ve never installed RAM before, it is no problem - you can scan the QR code and follow along easy instructions and videos on how to install it.\nSo why tf am I talking about this laptop in a post about code documentation? Well, without good documentation our world would be fucked. I really mean that.\nSo, if you’re a data scientist, software engineer, or anybody writing code, keep in mind that your code is worthless if it’s not well documented. Stop with the “I don’t write comments cus the code speaks for itself” bullshit. Write out clear documentation for your future self and for others.\nI’m going to show some ways to automate your code documentation so that you can put in minimal effort and still have killer documentation."
  },
  {
    "objectID": "posts/2024-09-11-linking-code-quarto/index.html#python",
    "href": "posts/2024-09-11-linking-code-quarto/index.html#python",
    "title": "Automatically link code to your documentation",
    "section": "python",
    "text": "python"
  },
  {
    "objectID": "posts/2024-09-11-linking-code-quarto/index.html#r",
    "href": "posts/2024-09-11-linking-code-quarto/index.html#r",
    "title": "Automatically link code to your documentation",
    "section": "r",
    "text": "r"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this blog"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "blog",
    "section": "",
    "text": "Automatically link code to your documentation\n\n\n\n\n\n\nquarto\n\n\ndocumentation\n\n\n\n\n\n\n\n\n\nSep 11, 2024\n\n\nfrank aragona\n\n\n\n\n\n\n\n\n\n\n\n\nTranslating Quarto (and other markdown files) into Any Language\n\n\n\n\n\n\ntranslation\n\n\nquarto\n\n\n\nTranslating the language of the text, not the programming language!\n\n\n\n\n\nAug 21, 2024\n\n\nFrank Aragona\n\n\n\n\n\n\n\n\n\n\n\n\nPost With Code\n\n\n\n\n\n\nnews\n\n\ncode\n\n\nanalysis\n\n\n\n\n\n\n\n\n\nAug 20, 2024\n\n\nHarlow Malloc\n\n\n\n\n\n\n\n\n\n\n\n\nWelcome To My Blog\n\n\n\n\n\n\nnews\n\n\n\n\n\n\n\n\n\nAug 17, 2024\n\n\nTristan O’Malley\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/post-with-code/index.html",
    "href": "posts/post-with-code/index.html",
    "title": "Post With Code",
    "section": "",
    "text": "This is a post with executable code."
  },
  {
    "objectID": "posts/welcome/index.html",
    "href": "posts/welcome/index.html",
    "title": "Welcome To My Blog",
    "section": "",
    "text": "This is the first post in a Quarto blog. Welcome!\n\nSince this post doesn’t specify an explicit image, the first image in the post will be used in the listing page of posts."
  }
]